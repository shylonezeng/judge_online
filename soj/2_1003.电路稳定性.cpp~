#include <iostream>
#include <fstream>
#include <cstring>
#include <vector>
#include <queue>

#define MAXSIZE 100

using namespace std;

float recurse(string str, vector<float> &pi){
// 	cout<<"string:"<<str<<endl;
	int len=str.size();
	if(len==0)
		return 0;
	vector<float> sub_parallel;	//suposing that series components come behind parallel ones
	vector<float> sub_series;
	queue<char> cqueue;
	string substr;
	bool substr_last=false;

	int p=0;
	while(p<len){
		char ch=str[p];
		if(substr_last)
			substr+=ch;

		switch(ch){
			case '(':
				{
				
					if(cqueue.empty())
						substr_last=true;
					cqueue.push(ch);
				}
				break;
			case ')':
				cqueue.pop();
				if(cqueue.empty()){
					substr_last=false;
					//begin solving sub probelem
					substr.erase(substr.end()-1);
					float sub_result=recurse(substr,pi);			
					sub_parallel.push_back(sub_result);
					
					substr.clear();	
				}

				break;
			case ',':
				break;
			default:
				if(!substr_last){
					sub_series.push_back(pi[ch-'A']);
				}
				break;				
		}

		p++;
	}
	float prlpart_result=1;
	//
	vector<float>::iterator iter=sub_parallel.begin();
	while(iter!=sub_parallel.end()){
		prlpart_result*=(*iter);
		iter++;
	}

	if(sub_parallel.empty())
		prlpart_result=0;
// 	cout<<"parallel part:"<<prlpart_result<<endl;
	// 	float result=1;
	float ok=1-prlpart_result;
	iter=sub_series.begin();
	while(iter!=sub_series.end()){
		ok*=1-(*iter);
		iter++;
	}
// 	cout<<"sub prolbem res:"<<1-ok<<endl;

	return 1-ok;	
}

int  main(int argc ,char **argv){
#ifdef _mydebug
	ifstream cin("input");
#define debug_info "/****read data from file input****/\n"
#else
#define debug_info ""
#endif

	cout<<debug_info;
	int cmp_num;
	while(cin>>cmp_num){
		if(cmp_num==0)
			return -1;
		string einfo;
		cin>>einfo;
		vector<float> pi;
		for(int i=0;i<cmp_num;++i){
			float p;
			cin>>p;
			pi.push_back(p);
		}
		float  res=recurse(einfo,pi);
		std::cout.precision(4);
		cout<<res<<endl;
// 		5sprintf(sres,"%.4f\n",res);
// 
// 		string::iterator iter=sres.end()-1;
// 		while(*iter=='0') iter--;
// 		sres.erase(iter+1,sres.end());
// 		cout<<sres<<endl;
			
		//input data
	}
	return 0;
}
